name: Build and Test

on: [push, pull_request]

jobs:
  build_wheels:
    env:
      CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
      CIBW_BEFORE_ALL_LINUX: WD=`pwd` && /opt/python/cp38-cp38/bin/python -m pip install cmake && cp /opt/_internal/cpython-3.8.13/bin/cmake /usr/local/bin/cmake && cmake --version && whereis cmake
      CIBW_BEFORE_ALL_MACOS: WD=`pwd` && pip install cmake
      CIBW_TEST_REQUIRES_LINUX: pytest==5.4.3 nbval flake8 mypy onnxruntime
      CIBW_TEST_REQUIRES_MACOS: pytest==5.4.3 nbval
      CIBW_TEST_REQUIRES_WINDOWS: pytest==5.4.3 nbval
      # latest pytorch is not available on py3.5, just ignore the error
      CIBW_BEFORE_TEST_LINUX: pip install torch==1.7.1+cpu torchvision==0.8.2+cpu torchaudio==0.7.2 -f https://download.pytorch.org/whl/torch_stable.html || true
      CIBW_TEST_COMMAND: pytest {project}/onnxoptimizer/test
      CIBW_TEST_COMMAND_LINUX: cd {project} && flake8 && pytest
      CIBW_ENVIRONMENT: CMAKE_ARGS="-DONNX_USE_PROTOBUF_SHARED_LIBS=OFF -DProtobuf_USE_STATIC_LIBS=ON -DONNX_USE_LITE_PROTO=ON"
      CIBW_ENVIRONMENT_WINDOWS: USE_MSVC_STATIC_RUNTIME=0 CMAKE_ARGS="-DONNX_USE_PROTOBUF_SHARED_LIBS=OFF -DProtobuf_USE_STATIC_LIBS=ON -DONNX_USE_LITE_PROTO=ON"
      # Only build on Python 3 and skip 32-bit builds
      CIBW_BUILD: cp3?-*
      # Skip python 3.6
      CIBW_SKIP: "cp36-* *-win32 *-manylinux_i686 *-musllinux_*"
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-2019, macos-10.15]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Build wheels
      uses: pypa/cibuildwheel@v2.7.0
    - uses: actions/upload-artifact@v2
      with:
        path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Build sdist
      run: pipx run build --sdist

    - name: Install and test sdist
      run: |
        # It's important to leave the project directory where a 'onnxoptimizer' subdirectory exists
        cd dist
        python3 -m pip install *.tar.gz
        python3 -c "import onnxoptimizer; print(onnxoptimizer.get_fuse_and_elimination_passes())"

    - uses: actions/upload-artifact@v2
      with:
        path: dist/*.tar.gz
