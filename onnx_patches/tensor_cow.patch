diff --git a/onnx/common/tensor.h b/onnx/common/tensor.h
index 1db2e0f8..3cdf8850 100644
--- a/onnx/common/tensor.h
+++ b/onnx/common/tensor.h
@@ -12,6 +12,49 @@
 namespace ONNX_NAMESPACE {
 
 struct Tensor final {
+    Tensor(const Tensor& other): 
+        is_segment_(other.is_segment_) ,
+        segment_begin_(other.segment_begin_) ,
+        segment_end_(other.segment_end_) ,
+        has_name_(other.has_name_) ,
+        name_(other.name_) ,
+        elem_type_(other.elem_type_) ,
+        sizes_(other.sizes_),
+        float_data_(other.float_data_),
+        double_data_(other.double_data_),
+        int32_data_(other.int32_data_),
+        int64_data_(other.int64_data_),
+        uint64_data_(other.uint64_data_),
+        is_raw_data_(other.is_raw_data_)
+    {
+        for (const auto &x : other.string_data_) {
+            string_data_.push_back(std::string(x.c_str(), x.size()));
+        }
+        raw_data_ = std::string(other.raw_data_.c_str(), other.raw_data_.size());
+    }
+    friend void swap(Tensor& first, Tensor& second) noexcept {
+        using std::swap;
+        swap(first.is_segment_, second.is_segment_);
+        swap(first.segment_begin_, second.segment_begin_);
+        swap(first.segment_end_, second.segment_end_);
+        swap(first.has_name_, second.has_name_);
+        swap(first.name_, second.name_);
+        swap(first.elem_type_, second.elem_type_);
+        swap(first.sizes_, second.sizes_);
+        swap(first.float_data_, second.float_data_);
+        swap(first.double_data_, second.double_data_);
+        swap(first.int32_data_, second.int32_data_);
+        swap(first.int64_data_, second.int64_data_);
+        swap(first.uint64_data_, second.uint64_data_);
+        swap(first.is_raw_data_, second.is_raw_data_);
+        swap(first.string_data_, second.string_data_);
+        swap(first.raw_data_, second.raw_data_);
+    }
+    Tensor& operator=(Tensor other) {
+        std::cout << "hi!!!" << std::endl;
+        swap(*this, other);
+        return *this;
+    }
 private:
   bool is_segment_;
   int64_t segment_begin_;
